//--------------------------------------------------------------------------------------------------
// <auto-generated>
//
//     This code was generated by code generator tool.
//
//     To customize the code use your own partial class. For more info about how to use and customize
//     the generated code see the documentation at https://docs.xperience.io/.
//
// </auto-generated>
//--------------------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using CMS;
using CMS.Base;
using CMS.Helpers;
using CMS.DataEngine;
using CMS.DocumentEngine;
using CMS.DocumentEngine.Types.BAY;

[assembly: RegisterDocumentType(FooterNavigation.CLASS_NAME, typeof(FooterNavigation))]

namespace CMS.DocumentEngine.Types.BAY
{
	/// <summary>
	/// Represents a content item of type FooterNavigation.
	/// </summary>
	public partial class FooterNavigation : TreeNode
	{
		#region "Constants and variables"

		/// <summary>
		/// The name of the data class.
		/// </summary>
		public const string CLASS_NAME = "BAY.FooterNavigation";


		/// <summary>
		/// The instance of the class that provides extended API for working with FooterNavigation fields.
		/// </summary>
		private readonly FooterNavigationFields mFields;

		#endregion


		#region "Properties"

		/// <summary>
		/// NavigationID.
		/// </summary>
		[DatabaseIDField]
		public int FooterNavigationID
		{
			get
			{
				return ValidationHelper.GetInteger(GetValue("FooterNavigationID"), 0);
			}
			set
			{
				SetValue("FooterNavigationID", value);
			}
		}


		/// <summary>
		/// Navigation name.
		/// </summary>
		[DatabaseField]
		public string NavigationName
		{
			get
			{
				return ValidationHelper.GetString(GetValue("NavigationName"), @"");
			}
			set
			{
				SetValue("NavigationName", value);
			}
		}


		/// <summary>
		/// Element ID.
		/// </summary>
		[DatabaseField]
		public string ElementID
		{
			get
			{
				return ValidationHelper.GetString(GetValue("ElementID"), @"");
			}
			set
			{
				SetValue("ElementID", value);
			}
		}


		/// <summary>
		/// Is column.
		/// </summary>
		[DatabaseField]
		public bool NavigationIsColumn
		{
			get
			{
				return ValidationHelper.GetBoolean(GetValue("NavigationIsColumn"), false);
			}
			set
			{
				SetValue("NavigationIsColumn", value);
			}
		}


		/// <summary>
		/// Is title.
		/// </summary>
		[DatabaseField]
		public bool IsTitle
		{
			get
			{
				return ValidationHelper.GetBoolean(GetValue("IsTitle"), false);
			}
			set
			{
				SetValue("IsTitle", value);
			}
		}


		/// <summary>
		/// Title.
		/// </summary>
		[DatabaseField]
		public string Title
		{
			get
			{
				return ValidationHelper.GetString(GetValue("Title"), @"");
			}
			set
			{
				SetValue("Title", value);
			}
		}


		/// <summary>
		/// Optional CSS Class applied to the item.
		/// </summary>
		[DatabaseField]
		public string NavigationLinkCSS
		{
			get
			{
				return ValidationHelper.GetString(GetValue("NavigationLinkCSS"), @"");
			}
			set
			{
				SetValue("NavigationLinkCSS", value);
			}
		}


		/// <summary>
		/// Whether or not the Navigation Item should automatically build itself off of the selected page, or if you want to manually enter in the information.
		/// </summary>
		[DatabaseField]
		public int NavigationType
		{
			get
			{
				return ValidationHelper.GetInteger(GetValue("NavigationType"), 0);
			}
			set
			{
				SetValue("NavigationType", value);
			}
		}


		/// <summary>
		/// Can select a page, the navigation will be based on this page's Title and Url.
		/// </summary>
		[DatabaseField]
		public Guid NavigationPageNodeGuid
		{
			get
			{
				return ValidationHelper.GetGuid(GetValue("NavigationPageNodeGuid"), Guid.Empty);
			}
			set
			{
				SetValue("NavigationPageNodeGuid", value);
			}
		}


		/// <summary>
		/// Can be HTML (icons and stuff), but be sure to make it valid HTML if you do.
		/// </summary>
		[DatabaseField]
		public string NavigationLinkText
		{
			get
			{
				return ValidationHelper.GetString(GetValue("NavigationLinkText"), @"");
			}
			set
			{
				SetValue("NavigationLinkText", value);
			}
		}


		/// <summary>
		/// Nav Link.
		/// </summary>
		[DatabaseField]
		public string NavigationLinkUrl
		{
			get
			{
				return ValidationHelper.GetString(GetValue("NavigationLinkUrl"), @"");
			}
			set
			{
				SetValue("NavigationLinkUrl", value);
			}
		}


		/// <summary>
		/// Link target.
		/// </summary>
		[DatabaseField]
		public string NavigationLinkTarget
		{
			get
			{
				return ValidationHelper.GetString(GetValue("NavigationLinkTarget"), @"_self");
			}
			set
			{
				SetValue("NavigationLinkTarget", value);
			}
		}


		/// <summary>
		/// Descriptive text for on hover and for screen readers.
		/// </summary>
		[DatabaseField]
		public string NavigationLinkAlt
		{
			get
			{
				return ValidationHelper.GetString(GetValue("NavigationLinkAlt"), @"");
			}
			set
			{
				SetValue("NavigationLinkAlt", value);
			}
		}


		/// <summary>
		/// Optional On click for the link.
		/// </summary>
		[DatabaseField]
		public string NavigationLinkOnClick
		{
			get
			{
				return ValidationHelper.GetString(GetValue("NavigationLinkOnClick"), @"");
			}
			set
			{
				SetValue("NavigationLinkOnClick", value);
			}
		}


		/// <summary>
		/// Invisible.
		/// </summary>
		[DatabaseField]
		public bool Invisible
		{
			get
			{
				return ValidationHelper.GetBoolean(GetValue("Invisible"), false);
			}
			set
			{
				SetValue("Invisible", value);
			}
		}


		/// <summary>
		/// Gets an object that provides extended API for working with FooterNavigation fields.
		/// </summary>
		[RegisterProperty]
		public FooterNavigationFields Fields
		{
			get
			{
				return mFields;
			}
		}


		/// <summary>
		/// Provides extended API for working with FooterNavigation fields.
		/// </summary>
		[RegisterAllProperties]
		public partial class FooterNavigationFields : AbstractHierarchicalObject<FooterNavigationFields>
		{
			/// <summary>
			/// The content item of type FooterNavigation that is a target of the extended API.
			/// </summary>
			private readonly FooterNavigation mInstance;


			/// <summary>
			/// Initializes a new instance of the <see cref="FooterNavigationFields" /> class with the specified content item of type FooterNavigation.
			/// </summary>
			/// <param name="instance">The content item of type FooterNavigation that is a target of the extended API.</param>
			public FooterNavigationFields(FooterNavigation instance)
			{
				mInstance = instance;
			}


			/// <summary>
			/// NavigationID.
			/// </summary>
			public int ID
			{
				get
				{
					return mInstance.FooterNavigationID;
				}
				set
				{
					mInstance.FooterNavigationID = value;
				}
			}


			/// <summary>
			/// Navigation name.
			/// </summary>
			public string NavigationName
			{
				get
				{
					return mInstance.NavigationName;
				}
				set
				{
					mInstance.NavigationName = value;
				}
			}


			/// <summary>
			/// Element ID.
			/// </summary>
			public string ElementID
			{
				get
				{
					return mInstance.ElementID;
				}
				set
				{
					mInstance.ElementID = value;
				}
			}


			/// <summary>
			/// Is column.
			/// </summary>
			public bool NavigationIsColumn
			{
				get
				{
					return mInstance.NavigationIsColumn;
				}
				set
				{
					mInstance.NavigationIsColumn = value;
				}
			}


			/// <summary>
			/// Is title.
			/// </summary>
			public bool IsTitle
			{
				get
				{
					return mInstance.IsTitle;
				}
				set
				{
					mInstance.IsTitle = value;
				}
			}


			/// <summary>
			/// Title.
			/// </summary>
			public string Title
			{
				get
				{
					return mInstance.Title;
				}
				set
				{
					mInstance.Title = value;
				}
			}


			/// <summary>
			/// Optional CSS Class applied to the item.
			/// </summary>
			public string NavigationLinkCSS
			{
				get
				{
					return mInstance.NavigationLinkCSS;
				}
				set
				{
					mInstance.NavigationLinkCSS = value;
				}
			}


			/// <summary>
			/// Whether or not the Navigation Item should automatically build itself off of the selected page, or if you want to manually enter in the information.
			/// </summary>
			public int NavigationType
			{
				get
				{
					return mInstance.NavigationType;
				}
				set
				{
					mInstance.NavigationType = value;
				}
			}


			/// <summary>
			/// Can select a page, the navigation will be based on this page's Title and Url.
			/// </summary>
			public Guid NavigationPageNodeGuid
			{
				get
				{
					return mInstance.NavigationPageNodeGuid;
				}
				set
				{
					mInstance.NavigationPageNodeGuid = value;
				}
			}


			/// <summary>
			/// Can be HTML (icons and stuff), but be sure to make it valid HTML if you do.
			/// </summary>
			public string NavigationLinkText
			{
				get
				{
					return mInstance.NavigationLinkText;
				}
				set
				{
					mInstance.NavigationLinkText = value;
				}
			}


			/// <summary>
			/// Nav Link.
			/// </summary>
			public string NavigationLinkUrl
			{
				get
				{
					return mInstance.NavigationLinkUrl;
				}
				set
				{
					mInstance.NavigationLinkUrl = value;
				}
			}


			/// <summary>
			/// Link target.
			/// </summary>
			public string NavigationLinkTarget
			{
				get
				{
					return mInstance.NavigationLinkTarget;
				}
				set
				{
					mInstance.NavigationLinkTarget = value;
				}
			}


			/// <summary>
			/// Descriptive text for on hover and for screen readers.
			/// </summary>
			public string NavigationLinkAlt
			{
				get
				{
					return mInstance.NavigationLinkAlt;
				}
				set
				{
					mInstance.NavigationLinkAlt = value;
				}
			}


			/// <summary>
			/// Optional On click for the link.
			/// </summary>
			public string NavigationLinkOnClick
			{
				get
				{
					return mInstance.NavigationLinkOnClick;
				}
				set
				{
					mInstance.NavigationLinkOnClick = value;
				}
			}


			/// <summary>
			/// Invisible.
			/// </summary>
			public bool Invisible
			{
				get
				{
					return mInstance.Invisible;
				}
				set
				{
					mInstance.Invisible = value;
				}
			}
		}

		#endregion


		#region "Constructors"

		/// <summary>
		/// Initializes a new instance of the <see cref="FooterNavigation" /> class.
		/// </summary>
		public FooterNavigation() : base(CLASS_NAME)
		{
			mFields = new FooterNavigationFields(this);
		}

		#endregion
	}
}
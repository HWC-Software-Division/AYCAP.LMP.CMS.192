//--------------------------------------------------------------------------------------------------
// <auto-generated>
//
//     This code was generated by code generator tool.
//
//     To customize the code use your own partial class. For more info about how to use and customize
//     the generated code see the documentation at https://docs.xperience.io/.
//
// </auto-generated>
//--------------------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using CMS;
using CMS.Base;
using CMS.Helpers;
using CMS.DataEngine;
using CMS.CustomTables;
using CMS.CustomTables.Types.HXC;

[assembly: RegisterCustomTable(FormComponentRuleItem.CLASS_NAME, typeof(FormComponentRuleItem))]

namespace CMS.CustomTables.Types.HXC
{
	/// <summary>
	/// Represents a content item of type FormComponentRuleItem.
	/// </summary>
	public partial class FormComponentRuleItem : CustomTableItem
	{
		#region "Constants and variables"

		/// <summary>
		/// The name of the data class.
		/// </summary>
		public const string CLASS_NAME = "HXC.FormComponentRule";


		/// <summary>
		/// The instance of the class that provides extended API for working with FormComponentRuleItem fields.
		/// </summary>
		private readonly FormComponentRuleItemFields mFields;

		#endregion


		#region "Properties"

		/// <summary>
		/// Rule ID.
		/// </summary>
		[DatabaseField]
		public string RuleID
		{
			get
			{
				return ValidationHelper.GetString(GetValue("RuleID"), @"");
			}
			set
			{
				SetValue("RuleID", value);
			}
		}


		/// <summary>
		/// Server-side match pattern (C#).
		/// </summary>
		[DatabaseField]
		public string ServerSideMatchPattern
		{
			get
			{
				return ValidationHelper.GetString(GetValue("ServerSideMatchPattern"), @"");
			}
			set
			{
				SetValue("ServerSideMatchPattern", value);
			}
		}


		/// <summary>
		/// Server side use function to validate.
		/// </summary>
		[DatabaseField]
		public bool ServerSideUseFunction
		{
			get
			{
				return ValidationHelper.GetBoolean(GetValue("ServerSideUseFunction"), false);
			}
			set
			{
				SetValue("ServerSideUseFunction", value);
			}
		}


		/// <summary>
		/// Server side use function name.
		/// </summary>
		[DatabaseField]
		public string ServerSideUseFunctionName
		{
			get
			{
				return ValidationHelper.GetString(GetValue("ServerSideUseFunctionName"), @"");
			}
			set
			{
				SetValue("ServerSideUseFunctionName", value);
			}
		}


		/// <summary>
		/// Regular expression.
		/// </summary>
		[DatabaseField]
		public string RegEx
		{
			get
			{
				return ValidationHelper.GetString(GetValue("RegEx"), @"");
			}
			set
			{
				SetValue("RegEx", value);
			}
		}


		/// <summary>
		/// Regular express validate.
		/// </summary>
		[DatabaseField]
		public string RegExValidate
		{
			get
			{
				return ValidationHelper.GetString(GetValue("RegExValidate"), @"");
			}
			set
			{
				SetValue("RegExValidate", value);
			}
		}


		/// <summary>
		/// On value changed JavaScript.
		/// </summary>
		[DatabaseField]
		public string OnValueChanged
		{
			get
			{
				return ValidationHelper.GetString(GetValue("OnValueChanged"), @"");
			}
			set
			{
				SetValue("OnValueChanged", value);
			}
		}


		/// <summary>
		/// Has pattern.
		/// </summary>
		[DatabaseField]
		public bool HasPattern
		{
			get
			{
				return ValidationHelper.GetBoolean(GetValue("HasPattern"), false);
			}
			set
			{
				SetValue("HasPattern", value);
			}
		}


		/// <summary>
		/// JavaScript pattern.
		/// </summary>
		[DatabaseField]
		public string PatternJS
		{
			get
			{
				return ValidationHelper.GetString(GetValue("PatternJS"), @"");
			}
			set
			{
				SetValue("PatternJS", value);
			}
		}


		/// <summary>
		/// Pattern invalid message.
		/// </summary>
		[DatabaseField]
		public string PatternInvalidMessage
		{
			get
			{
				return ValidationHelper.GetString(GetValue("PatternInvalidMessage"), @"");
			}
			set
			{
				SetValue("PatternInvalidMessage", value);
			}
		}


		/// <summary>
		/// Gets an object that provides extended API for working with FormComponentRuleItem fields.
		/// </summary>
		[RegisterProperty]
		public FormComponentRuleItemFields Fields
		{
			get
			{
				return mFields;
			}
		}


		/// <summary>
		/// Provides extended API for working with FormComponentRuleItem fields.
		/// </summary>
		[RegisterAllProperties]
		public partial class FormComponentRuleItemFields : AbstractHierarchicalObject<FormComponentRuleItemFields>
		{
			/// <summary>
			/// The content item of type FormComponentRuleItem that is a target of the extended API.
			/// </summary>
			private readonly FormComponentRuleItem mInstance;


			/// <summary>
			/// Initializes a new instance of the <see cref="FormComponentRuleItemFields" /> class with the specified content item of type FormComponentRuleItem.
			/// </summary>
			/// <param name="instance">The content item of type FormComponentRuleItem that is a target of the extended API.</param>
			public FormComponentRuleItemFields(FormComponentRuleItem instance)
			{
				mInstance = instance;
			}


			/// <summary>
			/// Rule ID.
			/// </summary>
			public string RuleID
			{
				get
				{
					return mInstance.RuleID;
				}
				set
				{
					mInstance.RuleID = value;
				}
			}


			/// <summary>
			/// Server-side match pattern (C#).
			/// </summary>
			public string ServerSideMatchPattern
			{
				get
				{
					return mInstance.ServerSideMatchPattern;
				}
				set
				{
					mInstance.ServerSideMatchPattern = value;
				}
			}


			/// <summary>
			/// Server side use function to validate.
			/// </summary>
			public bool ServerSideUseFunction
			{
				get
				{
					return mInstance.ServerSideUseFunction;
				}
				set
				{
					mInstance.ServerSideUseFunction = value;
				}
			}


			/// <summary>
			/// Server side use function name.
			/// </summary>
			public string ServerSideUseFunctionName
			{
				get
				{
					return mInstance.ServerSideUseFunctionName;
				}
				set
				{
					mInstance.ServerSideUseFunctionName = value;
				}
			}


			/// <summary>
			/// Regular expression.
			/// </summary>
			public string RegEx
			{
				get
				{
					return mInstance.RegEx;
				}
				set
				{
					mInstance.RegEx = value;
				}
			}


			/// <summary>
			/// Regular express validate.
			/// </summary>
			public string RegExValidate
			{
				get
				{
					return mInstance.RegExValidate;
				}
				set
				{
					mInstance.RegExValidate = value;
				}
			}


			/// <summary>
			/// On value changed JavaScript.
			/// </summary>
			public string OnValueChanged
			{
				get
				{
					return mInstance.OnValueChanged;
				}
				set
				{
					mInstance.OnValueChanged = value;
				}
			}


			/// <summary>
			/// Has pattern.
			/// </summary>
			public bool HasPattern
			{
				get
				{
					return mInstance.HasPattern;
				}
				set
				{
					mInstance.HasPattern = value;
				}
			}


			/// <summary>
			/// JavaScript pattern.
			/// </summary>
			public string PatternJS
			{
				get
				{
					return mInstance.PatternJS;
				}
				set
				{
					mInstance.PatternJS = value;
				}
			}


			/// <summary>
			/// Pattern invalid message.
			/// </summary>
			public string PatternInvalidMessage
			{
				get
				{
					return mInstance.PatternInvalidMessage;
				}
				set
				{
					mInstance.PatternInvalidMessage = value;
				}
			}
		}

		#endregion


		#region "Constructors"

		/// <summary>
		/// Initializes a new instance of the <see cref="FormComponentRuleItem" /> class.
		/// </summary>
		public FormComponentRuleItem() : base(CLASS_NAME)
		{
			mFields = new FormComponentRuleItemFields(this);
		}

		#endregion
	}
}